apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: reviews-{{ .Values.reviews.version }}
  labels:
    app: reviews
    version: "{{ .Values.reviews.version }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reviews
      version: "{{ .Values.reviews.version }}"
  template:
    metadata:
      labels:
        app: reviews
        version: "{{ .Values.reviews.version }}"
    spec:
      serviceAccountName: bookinfo-reviews-{{ .Values.reviews.version }}
      containers:
        - name: reviews
          image: docker.io/istio/examples-bookinfo-reviews-{{ .Values.reviews.version }}
          imagePullPolicy: IfNotPresent
          env:
            - name: LOG_DIR
              value: "/tmp/logs"
          ports:
            - containerPort: 9080
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: wlp-output
              mountPath: /opt/ibm/wlp/output
      volumes:
        - name: wlp-output
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  strategy:
    blueGreen:
      # Name of the service that the rollout modifies as the active service.
      activeService: active-service
      # Pre-promotion analysis run
      prePromotionAnalysis:
        templates:
        - templateName: success-rate
        # template arguments
        args:
        - name: service-name
          value: guestbook-svc.default.svc.cluster.local
      # Name of the service that the rollout modifies as the preview service.
      previewService: preview-service 
      # The number of replicas to run under the preview service before the switchover. Once the rollout is resumed the new replicaset will be full scaled up before the switch occurs +optional
      previewReplicaCount: 1
      # Indicates if the rollout should automatically promote the new ReplicaSet to the active service or enter a paused state. If not specified, the default value is true. +optional
      autoPromotionEnabled: false
      # Automatically promotes the current ReplicaSet to active after the specified pause delay in seconds after the ReplicaSet becomes ready. If omitted, the Rollout enters and remains in a paused state until manually resumed by resetting spec.Paused to false. +optional
      autoPromotionSeconds: 30
      # Adds a delay before scaling down the previous replicaset. If omitted, the Rollout waits 30 seconds before scaling down the previous ReplicaSet. A minimum of 30 seconds is recommended to ensure IP table propagation across the nodes in a cluster. See https://github.com/argoproj/argo-rollouts/issues/19#issuecomment-476329960 for more information
      scaleDownDelaySeconds: 30
      # Limits the number of old RS that can run at once before getting scaled down. Defaults to nil
      scaleDownDelayRevisionLimit: 2
    canary:
      # CanaryService holds the name of a service which selects pods with canary version and don't select any pods with stable version. +optional
      canaryService: canary-service
      # StableService holds the name of a service which selects pods with stable version and don't select any pods with canary version. +optional
      stableService: stable-service
      # The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of update (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down by 30% immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that at least 70% of original number of pods are available at all times during the update. +optional
      maxUnavailable: 1
      # The maximum number of pods that can be scheduled above the original number of pods. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of the update (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up by 30% immediately when the rolling update starts. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of original pods. +optional
      maxSurge: "20%"
      # Background analysis to run during the rollout
      analysis:
        templates:
        - templateName: success-rate
        # template arguments
        args:
        - name: service-name
          value: guestbook-svc.default.svc.cluster.local
      # Define the order of phases to execute the canary deployment +optional
      steps:
        # Sets the ratio of new replicasets to 20%
      - setWeight: 20 
        # Pauses the rollout for an hour
      - pause:
          duration: 1h # One hour
      - setWeight: 40
        # Sets .spec.paused to true and waits until the field is changed back
      - pause: {} 
